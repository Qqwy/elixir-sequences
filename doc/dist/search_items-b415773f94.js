searchNodes=[{"ref":"Sequences.html","title":"Sequences","type":"module","doc":"The Sequences module defines multiple methods that return a Stream of numbers, usually integers. The different Streams can be tapped in on-demand, by running any Enum function on them. Be warned: Do not use any function that iterates through the complete Stream. If you try this, your code will hang, as Elixir will never finish iterating through the infinite lists. For efficiency, these sequences are calculated in a way that re-uses previously calculated results whenever possible. See https://github.com/Qqwy/elixir-sequences for more information."},{"ref":"Sequences.html#catalan/0","title":"Sequences.catalan/0","type":"function","doc":"An infinite Stream containing the Catalan numbers (A000108). Runs in O(n²), memory consumption is O(n²) Definition: C(0) = 1 C(1) = 1 C(n) = Σ( C(i) * C(n-i)) for all i &lt;- 0 &lt;= i &lt; n Examples: iex&gt; Sequences.catalan |&gt; Enum.take(5) [1, 2, 5, 14, 42]"},{"ref":"Sequences.html#even_integers/0","title":"Sequences.even_integers/0","type":"function","doc":"An ascending Stream containing the even integers (A005843) Examples: iex&gt; Sequences.even_integers |&gt; Enum.take(5) [0,2,4,6,8]"},{"ref":"Sequences.html#factorials/0","title":"Sequences.factorials/0","type":"function","doc":"An infinite Stream containing the Factorial numbers (A000142). Runs in O(n) Definition: fact(0) = 1 fact(n) = n * fact(n-1) Examples: iex&gt; Sequences.factorials |&gt; Enum.take(5) [1, 1, 2, 6, 24]"},{"ref":"Sequences.html#fibonacchi/0","title":"Sequences.fibonacchi/0","type":"function","doc":"An infinite Stream containing the Fibonacci numbers (A000045). Runs in O(n) Definition: fib(0) = 1 fib(1) = 1 fib(n) = fib(n-1) + fib(n-2) Examples: iex&gt; Sequences.fibonacchi |&gt; Enum.take(5) [1, 1, 2, 3, 5]"},{"ref":"Sequences.html#integers/0","title":"Sequences.integers/0","type":"function","doc":"An ascending Stream containing the nonnegative integers (A001477) Examples: iex&gt; Sequences.integers |&gt; Enum.take(5) [0,1,2,3,4]"},{"ref":"Sequences.html#integers/2","title":"Sequences.integers/2","type":"function","doc":"Defines an infinitely continuing integer Stream, starting at start , with step step between values. step defaults to 1. Usage: Sequences.integers(start, step) Examples: iex&gt; Sequences.integers(0,3) |&gt; Enum.take(5) [0,3,6,9,12] iex&gt; Sequences.integers(10,-1) |&gt; Enum.take(5) [10,9,8,7,6]"},{"ref":"Sequences.html#odd_integers/0","title":"Sequences.odd_integers/0","type":"function","doc":"An ascending Stream containing the odd integers (A005408) Examples: iex&gt; Sequences.odd_integers |&gt; Enum.take(5) [1,3,5,7,9]"},{"ref":"Sequences.html#ones/0","title":"Sequences.ones/0","type":"function","doc":"An infinite Stream of ones (A000012) Examples: iex&gt; Sequences.ones |&gt; Enum.take(5) [1,1,1,1,1]"},{"ref":"Sequences.html#pell_lucas_numbers/0","title":"Sequences.pell_lucas_numbers/0","type":"function","doc":"Returns an infinite stream of Pell-Lucas numbers. Pell-Lucas numbers are the numerators of the closest rational approximations to the square root of 2."},{"ref":"Sequences.html#pell_numbers/0","title":"Sequences.pell_numbers/0","type":"function","doc":"Returns an infinite stream of Pell numbers. Pell numbers are the denominators of the closest rational approximations to the square root of 2."},{"ref":"Sequences.html#pell_rationals/0","title":"Sequences.pell_rationals/0","type":"function","doc":"Returns an infinite stream of Rational numbers, combining both the Pell numbers and the Pell-Lucas numbers. These Rational numbers form the approximations to the square root of 2. The Rationals are constructed using the Ratio library. Examples: iex&gt; Enum.take Sequences.pell_rationals, 10 [1, 3 &lt;|&gt; 2, 7 &lt;|&gt; 5, 17 &lt;|&gt; 12, 41 &lt;|&gt; 29, 99 &lt;|&gt; 70, 239 &lt;|&gt; 169, 577 &lt;|&gt; 408, 1393 &lt;|&gt; 985, 3363 &lt;|&gt; 2378]"},{"ref":"Sequences.html#pell_tuples/0","title":"Sequences.pell_tuples/0","type":"function","doc":"Returns an infinite stream of tuples, combining both the Pell numbers and the Pell-Lucas numbers. These tuples form the closest rational approximations to the square root of 2."},{"ref":"Sequences.html#pi/0","title":"Sequences.pi/0","type":"function","doc":"Returns a stream of digits of the mathematical constant π (pi) including the starting 3, using Gibbons&#39; Spigot algorithm. This algorithm(see http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/spigot.pdf) is less fast than dedicated algorithms with a specified and fixed upper bound, but it has the advantage that you can specify exactly how many digits you need at a later time. Examples: iex&gt; Sequences.pi |&gt; Enum.take(20) [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3, 8, 4]"},{"ref":"Sequences.html#positive_integers/0","title":"Sequences.positive_integers/0","type":"function","doc":"An ascending Stream containing the positive integers (A000027) Examples: iex&gt; Sequences.positive_integers |&gt; Enum.take(5) [1,2,3,4,5]"},{"ref":"Sequences.html#primes/0","title":"Sequences.primes/0","type":"function","doc":"Defines an ascending integer Stream, containing the Prime numbers (A000040). This function uses Sequences.Primes.trial_division internally, although this might change in the future when more, faster prime-discovery methods are added. Runs in O(n*sqrt(n)/ln(n)²) Examples: iex&gt; Sequences.primes |&gt; Enum.take(10) [2,3,5,7,11,13,17,19,23,29]"},{"ref":"Sequences.html#squareroot_decimals/1","title":"Sequences.squareroot_decimals/1","type":"function","doc":"Returns a Stream of values 1-9, representing the decimal expansion of the square root of n. The decimal expansion is calculated using the Square Roots By Extraction technique described here. Examples iex&gt; Sequences.squareroot_decimals(2) |&gt; Enum.take(20) [4, 1, 4, 2, 1, 3, 5, 6, 2, 3, 7, 3, 0, 9, 5, 0, 4, 8, 8, 0] iex&gt; Sequences.squareroot_decimals(100) |&gt; Enum.take(20) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"},{"ref":"Sequences.html#squareroot_expansion/1","title":"Sequences.squareroot_expansion/1","type":"function","doc":"Returns a Stream of values 1-9, representing the decimal expansion of the square root of n. Note that squareroot_expansion/1 does not strip away the integral part at the front. Use squareroot_decimals/1 for that. The decimal expansion is calculated using the Square Roots By Extraction technique described here. Examples iex&gt; Sequences.squareroot_expansion(2) |&gt; Enum.take(20) [1, 4, 1, 4, 2, 1, 3, 5, 6, 2, 3, 7, 3, 0, 9, 5, 0, 4, 8, 8] iex&gt; Sequences.squareroot_expansion(100) |&gt; Enum.take(20) [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"},{"ref":"Sequences.html#squareroot_tuple/1","title":"Sequences.squareroot_tuple/1","type":"function","doc":"Returns a tuple where the first value is the integer square root of n, and the second value is a Stream that contains the decimal expansion of the square root of n. The decimal expansion is calculated using the Square Roots By Extraction technique described here. Examples iex&gt; {a, b} = Sequences.squareroot_tuple(42); {a, Enum.take(b, 10)} {6, [4, 8, 0, 7, 4, 0, 6, 9, 8, 4]}"},{"ref":"Sequences.html#squareroot_tuple/2","title":"Sequences.squareroot_tuple/2","type":"function","doc":"Returns a tuple where the first value is the integer square root of n, and the second value is a List that contains amount_of_digits digits of the decimal expansion of the square root of n. The decimal expansion is calculated using the Square Roots By Extraction technique described here. Examples iex&gt; Sequences.squareroot_tuple(100, 3) {10, [0, 0, 0]} iex&gt; Sequences.squareroot_tuple(2, 10) {1, [4, 1, 4, 2, 1, 3, 5, 6, 2, 3]} iex&gt; Sequences.squareroot_tuple(82, 10) {9, [0, 5, 5, 3, 8, 5, 1, 3, 8, 1]}"},{"ref":"Sequences.html#triangular/0","title":"Sequences.triangular/0","type":"function","doc":"An infinite Stream containing the Triangular numbers (A000217). Definition L(0) = 0 L(1) = 1 L(n) = L(n-2)+(2*n)-1 Examples: iex&gt; Sequences.triangular |&gt; Enum.take(5) [0, 1, 3, 6, 10]"},{"ref":"Sequences.html#zeroes/0","title":"Sequences.zeroes/0","type":"function","doc":"An infinite Stream of zeroes (A000004) Examples: iex&gt; Sequences.zeroes |&gt; Enum.take(5) [0,0,0,0,0]"},{"ref":"Sequences.Helper.html","title":"Sequences.Helper","type":"module","doc":"This module contains a few helper methods for the creation and manipulation of certain Sequences."},{"ref":"Sequences.Helper.html#divisible_by_any?/2","title":"Sequences.Helper.divisible_by_any?/2","type":"function","doc":"Returns true if num is divisible by any element in list (otherwise false). Stops evaluating the list as soon as a match is found."},{"ref":"Sequences.Helper.html#up_to_root/2","title":"Sequences.Helper.up_to_root/2","type":"function","doc":"Takes elements from the given collection_of_numbers while the items in the collection are smaller than the square root of the given max. It expects the collection_of_numbers to be in ascending format. Examples: iex&gt; Sequences.integers(0,2) |&gt; Sequences.Helper.up_to_root(100) |&gt; Enum.take(20) [0,2,4,6,8]"},{"ref":"Sequences.Primes.html","title":"Sequences.Primes","type":"module","doc":""},{"ref":"Sequences.Primes.html#trial_division/0","title":"Sequences.Primes.trial_division/0","type":"function","doc":"Defines an ascending integer Stream, containing the Prime numbers (A000040). This function uses Trial Division to calculate primes; For increased efficiency, only earlier-calculated primes are tested for divisibility. Runs in O(n*sqrt(n)/ln(n)²) Examples: iex&gt; Sequences.Primes.trial_division |&gt; Enum.take(10) [2,3,5,7,11,13,17,19,23,29]"}]